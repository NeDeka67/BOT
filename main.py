import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=os.getenv('BOT_TOKEN'),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id: int) -> bool:
    return str(user_id) == os.getenv('ADMIN_ID')

# ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("üé® –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ –∏–¥–µ–∏ –¥–ª—è –∞—Ä—Ç–æ–≤ –∏–ª–∏ –ø–æ—Å—Ç–æ–≤.")

@dp.message(Command("help"))
async def help(message: types.Message):
    await message.answer("–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –∏–¥–µ—é, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ—ë –∞–≤—Ç–æ—Ä—É!")

@dp.message(F.text & ~F.text.startswith('/'))
async def forward_to_admin(message: types.Message):
    if is_admin(message.from_user.id):
        return
    
    admin_id = os.getenv('ADMIN_ID')
    user = message.from_user
    
    try:
        await bot.send_message(
            admin_id,
            f"üì® –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç @{user.username} (ID: {user.id}):\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"{message.text}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"–û—Ç–≤–µ—Ç–∏—Ç—å: /reply_{user.id}"
        )
        await message.answer("‚úÖ –ò–¥–µ—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ—é")

@dp.message(F.photo | F.video | F.document)
async def forward_media(message: types.Message):
    if is_admin(message.from_user.id):
        return
    
    admin_id = os.getenv('ADMIN_ID')
    user = message.from_user
    
    try:
        caption = (
            f"üìé –ú–µ–¥–∏–∞ –æ—Ç @{user.username} (ID: {user.id})\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"{message.caption or ''}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"–û—Ç–≤–µ—Ç–∏—Ç—å: /reply_{user.id}"
        )
        
        if message.photo:
            await bot.send_photo(admin_id, message.photo[-1].file_id, caption=caption)
        elif message.video:
            await bot.send_video(admin_id, message.video.file_id, caption=caption)
        elif message.document:
            await bot.send_document(admin_id, message.document.file_id, caption=caption)
            
        await message.answer("‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª")

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í –ê–î–ú–ò–ù–ê ==========

@dp.message(F.text.regexp(r'^/(reply|r)_(\d+)(?:\s+(.+))?$'))
async def reply_to_user(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        import re
        match = re.match(r'^/(reply|r)_(\d+)(?:\s+(.+))?$', message.text)
        if not match:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /reply_123456 —Ç–µ–∫—Å—Ç –∏–ª–∏ /r_123456 —Ç–µ–∫—Å—Ç")
            return
        
        _, user_id, reply_text = match.groups()
        reply_text = reply_text or "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!"
        
        try:
            await bot.send_message(
                int(user_id),
                f"üíå –û—Ç–≤–µ—Ç –æ—Ç –∞–≤—Ç–æ—Ä–∞:\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n{reply_text}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            )
            await message.answer(f"‚úâÔ∏è –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except TelegramBadRequest as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞?)")
        except ValueError as e:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, –æ—à–∏–±–∫–∞: {e}")
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã reply: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


